{"version":3,"sources":["assets/scene/handle/handle.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class NewClass extends cc.Component {\n\n    @property(cc.Node)\n    center: cc.Node = null;\n\n    @property(cc.Node)\n    bg: cc.Node = null;\n\n    @property(cc.Node)\n    role: cc.Node = null;\n\n    private circleR: number = 100;\n    private radian: number = 0;\n    private speed: number = 3;\n    private isMoving: boolean = false;\n    onLoad() {\n        this.bg.on(cc.Node.EventType.TOUCH_START, this.touchStart.bind(this));\n        this.bg.on(cc.Node.EventType.TOUCH_MOVE, this.touchMove.bind(this));\n        this.bg.on(cc.Node.EventType.TOUCH_END, this.touchEnd.bind(this));\n        this.bg.on(cc.Node.EventType.TOUCH_CANCEL, this.touchEnd.bind(this));\n    }\n\n    touchStart(event: cc.Touch) {\n        this.isMoving = true;\n        let pos = this.bg.convertToNodeSpaceAR(event.getLocation());\n        this.center.setPosition(pos);\n    }\n    touchMove(event: cc.Touch) {\n        let radian = Math.atan2(this.center.y, this.center.x);\n        let ang = radian * 180 / Math.PI;\n        this.role.angle = ang;\n        if (this.center.getPosition().subSelf(cc.v2(0, 0)).mag() >= this.circleR) {\n            this.center.x = Math.cos(radian) * this.circleR;\n            this.center.y = Math.sin(radian) * this.circleR;\n        }\n        this.center.x += event.getDelta().x;\n        this.center.y += event.getDelta().y;\n        this.radian = radian;\n\n    }\n    touchEnd() {\n        this.isMoving = false;\n        this.center.x = this.center.y = 0;\n    }\n    update() {\n        if (this.isMoving) {\n            this.role.x += Math.cos(this.radian) * this.speed;\n            this.role.y += Math.sin(this.radian) * this.speed;\n        }\n    }\n\n}\n"]}