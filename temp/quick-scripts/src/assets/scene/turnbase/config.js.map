{"version":3,"sources":["assets/scene/turnbase/config.ts"],"names":[],"mappings":";;;;;;AAgBA;IAAA;IAyEA,CAAC;IArEiB,mBAAI,GAAlB;QACI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,IAAI,MAAM,GAAS,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC1C,MAAM,CAAC,IAAI,GAAG,kBAAM,CAAG,CAAC;gBACxB,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;gBACjB,IAAI,CAAC,IAAI,CAAC,EAAE;oBACR,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC5B;qBACI;oBACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC3B;aACJ;SACJ;IACL,CAAC;IAEc,0BAAW,GAA1B,UAA2B,IAAY;QACnC,IAAI,QAAQ,GAAS;YACjB,KAAK,EAAE,CAAC;YACR,IAAI,EAAE,EAAE;YACR,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,IAAI;YACV,IAAI;YACJ,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;YACR,IAAI;YACJ,KAAK,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI;YACjC,IAAI;YACJ,MAAM,EAAE,CAAC;YACT,MAAM,EAAE,CAAC;YACT,MAAM,EAAE,CAAC;SACZ,CAAA;QACD,IAAI,IAAI,IAAI,CAAC,EAAE;YACX,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/B,QAAQ,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAA,oCAAoC;YAC3D,QAAQ,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAA,qCAAqC;SAC/D;aACI;YACD,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAChC,QAAQ,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAA,qCAAqC;YAC5D,QAAQ,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAA,qCAAqC;SAC/D;QACD,OAAO,QAAQ,CAAC;IACpB,CAAC;IAWa,wBAAS,GAAvB,UAAwB,OAAe,EAAE,OAAe;QACpD,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;QAChD,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;QACjD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC1D,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBACjC,MAAM;aACT;SACJ;QACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACtC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC1B,CAAC;IAvEa,qBAAM,GAAW,EAAE,CAAC;IACpB,oBAAK,GAAW,EAAE,CAAC;IACnB,kBAAG,GAAW,EAAE,CAAC;IAiD/B;;;;;;;OAOG;IACY,0BAAW,GAAU,EAAE,CAAC,CAAA,WAAW;IAatD,qBAAC;CAzED,AAyEC,IAAA;kBAzEoB,cAAc","file":"","sourceRoot":"/","sourcesContent":["export interface user {\n    index: number;\n    name: string;\n    sex: number;\n    type: number;//0:family,1:enemy\n    //位置\n    gridX: number;\n    gridY: number;\n    //血量\n    blood: number;\n    //技能\n    skill1: number;\n    skill2: number;\n    skill3: number;\n\n}\nexport default class turnbaseconfig {\n    public static family: user[] = [];\n    public static enemy: user[] = [];\n    public static wid: number = 50;\n    public static init() {\n        this.family.splice(0);\n        this.enemy.splice(0);\n        this.tempGridArr.splice(0);\n        for (let i = 0; i < 5; i++) {\n            for (let j = 0; j < 2; j++) {\n                let player: user = this.getUserData(j, i);\n                player.name = `角色 ${i}`;\n                player.index = i;\n                if (j == 0) {\n                    this.family.push(player);\n                }\n                else {\n                    this.enemy.push(player);\n                }\n            }\n        }\n    }\n\n    private static getUserData(type: number): user {\n        let userData: user = {\n            index: 0,\n            name: \"\",\n            sex: 0,\n            type: type,\n            //位置\n            gridX: 0,\n            gridY: 0,\n            //血量\n            blood: 100 * Math.random() * 1000,\n            //技能\n            skill1: 0,\n            skill2: 0,\n            skill3: 0,\n        }\n        if (type == 0) {\n            let pos = this.getGridXY(1, 2);\n            userData.gridX = pos.x;//Math.floor(Math.random() * 8) + 1;\n            userData.gridY = pos.y;//Math.floor(Math.random() * 10) + 2;\n        }\n        else {\n            let pos = this.getGridXY(10, 2);\n            userData.gridX = pos.x;//Math.floor(Math.random() * 8) + 10;\n            userData.gridY = pos.y;//Math.floor(Math.random() * 10) + 2;\n        }\n        return userData;\n    }\n\n    /**\n     *  生成网格坐标\n     *  解决连个点在同一个坐标\n     * @private\n     * @static\n     * @type {any[]}\n     * @memberof turnbaseconfig\n     */\n    private static tempGridArr: any[] = [];//[{x:,y:}]\n    public static getGridXY(offsetX: number, offsetY: number) {\n        let x = Math.floor(Math.random() * 8) + offsetX;\n        let y = Math.floor(Math.random() * 10) + offsetY;\n        for (let i = 0; i < this.tempGridArr.length; i++) {\n            if (x == this.tempGridArr[i].x && y == this.tempGridArr[i].y) {\n                this.getGridXY(offsetX, offsetY);\n                break;\n            }\n        }\n        this.tempGridArr.push({ x: x, y: y });\n        return { x: x, y: y };\n    }\n}"]}